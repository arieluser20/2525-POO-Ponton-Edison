class Libro:
    """
    Representa un libro con título, autor, categoría e ISBN.
    El título y el autor se almacenan como una tupla inmutable.
    """
    def __init__(self, titulo, autor, categoria, isbn):
        self.info = (titulo, autor)  # Tupla inmutable
        self.categoria = categoria
        self.isbn = isbn

    def __str__(self):
        return f"{self.info[0]} por {self.info[1]} (Categoría: {self.categoria}, ISBN: {self.isbn})"


class Usuario:
    """
    Representa un usuario con nombre, ID único y lista de libros prestados.
    """
    def __init__(self, nombre, id_usuario):
        self.nombre = nombre
        self.id_usuario = id_usuario
        self.libros_prestados = []  # Lista de ISBNs

    def __str__(self):
        return f"{self.nombre} (ID: {self.id_usuario})"


class Biblioteca:
    """
    Gestiona libros, usuarios y préstamos.
    """
    def __init__(self):
        self.libros = {}  # ISBN: Libro
        self.usuarios = {}  # ID: Usuario
        self.ids_usuarios = set()  # IDs únicos

    # --- Gestión de libros ---
    def agregar_libro(self, libro):
        if libro.isbn in self.libros:
            print("El libro ya existe en la biblioteca.")
        else:
            self.libros[libro.isbn] = libro
            print(f"Libro '{libro.info[0]}' agregado.")

    def quitar_libro(self, isbn):
        if isbn in self.libros:
            del self.libros[isbn]
            print(f"Libro con ISBN {isbn} eliminado.")
        else:
            print("Libro no encontrado.")

    # --- Gestión de usuarios ---
    def registrar_usuario(self, usuario):
        if usuario.id_usuario in self.ids_usuarios:
            print("El ID de usuario ya está registrado.")
        else:
            self.usuarios[usuario.id_usuario] = usuario
            self.ids_usuarios.add(usuario.id_usuario)
            print(f"Usuario '{usuario.nombre}' registrado.")

    def dar_baja_usuario(self, id_usuario):
        if id_usuario in self.usuarios:
            del self.usuarios[id_usuario]
            self.ids_usuarios.remove(id_usuario)
            print(f"Usuario con ID {id_usuario} dado de baja.")
        else:
            print("Usuario no encontrado.")

    # --- Préstamos ---
    def prestar_libro(self, id_usuario, isbn):
        if id_usuario not in self.usuarios:
            print("Usuario no registrado.")
            return
        if isbn not in self.libros:
            print("Libro no disponible.")
            return
        usuario = self.usuarios[id_usuario]
        if isbn in usuario.libros_prestados:
            print("El usuario ya tiene este libro prestado.")
            return
        usuario.libros_prestados.append(isbn)
        print(f"Libro '{self.libros[isbn].info[0]}' prestado a {usuario.nombre}.")

    def devolver_libro(self, id_usuario, isbn):
        if id_usuario not in self.usuarios:
            print("Usuario no registrado.")
            return
        usuario = self.usuarios[id_usuario]
        if isbn in usuario.libros_prestados:
            usuario.libros_prestados.remove(isbn)
            print(f"Libro con ISBN {isbn} devuelto por {usuario.nombre}.")
        else:
            print("El usuario no tiene este libro prestado.")

    # --- Búsquedas ---
    def buscar_por_titulo(self, titulo):
        return [libro for libro in self.libros.values() if libro.info[0].lower() == titulo.lower()]

    def buscar_por_autor(self, autor):
        return [libro for libro in self.libros.values() if libro.info[1].lower() == autor.lower()]

    def buscar_por_categoria(self, categoria):
        return [libro for libro in self.libros.values() if libro.categoria.lower() == categoria.lower()]

    # --- Listar libros prestados ---
    def listar_libros_prestados(self, id_usuario):
        if id_usuario not in self.usuarios:
            print("Usuario no registrado.")
            return
        usuario = self.usuarios[id_usuario]
        if not usuario.libros_prestados:
            print(f"{usuario.nombre} no tiene libros prestados.")
        else:
            print(f"Libros prestados a {usuario.nombre}:")
            for isbn in usuario.libros_prestados:
                print(f"- {self.libros[isbn]}")

# --- Pruebas del sistema ---
if __name__ == "__main__":
    # Crear biblioteca
    biblioteca = Biblioteca()

    # Agregar libros
    libro1 = Libro("Cien Años de Soledad", "Gabriel García Márquez", "Novela", "12345")
    libro2 = Libro("El Principito", "Antoine de Saint-Exupéry", "Fábula", "67890")
    biblioteca.agregar_libro(libro1)
    biblioteca.agregar_libro(libro2)

    # Registrar usuarios
    usuario1 = Usuario("Ana", "U001")
    usuario2 = Usuario("Luis", "U002")
    biblioteca.registrar_usuario(usuario1)
    biblioteca.registrar_usuario(usuario2)

    # Prestar libros
    biblioteca.prestar_libro("U001", "12345")
    biblioteca.prestar_libro("U002", "67890")

    # Listar libros prestados
    biblioteca.listar_libros_prestados("U001")
    biblioteca.listar_libros_prestados("U002")

    # Buscar libros
    print("Buscar por autor 'Gabriel García Márquez':")
    for libro in biblioteca.buscar_por_autor("Gabriel García Márquez"):
        print(libro)

    # Devolver libro
    biblioteca.devolver_libro("U001",
